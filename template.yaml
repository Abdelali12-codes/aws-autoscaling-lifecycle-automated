Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'


  InstanceType:
    Description: Amazon EC2 instance type for the instances
    Type: String
    AllowedValues:
      - t3.micro
      - t2.micro
      - t2.medium
    Default: t2.medium

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: A list of subnets for the Auto Scaling group

  Vpc:
     Type: 'AWS::EC2::VPC::Id'
     Description: the vpc id  
     
  HostedZoneId:
     Description: The HostedZoneId
     Type: AWS::Route53::HostedZone::Id
     
  Route53RecordName:
    Description: the record name of the elb alias
    Type: String
    
  SSLARN:
      Description: The ssl arn of your domain
      Type: String

  Name:
     Type: String
     Description: The Name Parameter
     Default: Abdelali
     
 LifecycleHookName:
     Type: String
     Description: the name of the autoscaling lifecycle hook
     Default: AutoScalingHook
     

Mappings:
  RegionMap:
    eu-west-3:
      AMI:  ami-02d0b1ffa5f16402d
      
      

Resources:
# launch template 
    myLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Metadata:
        AWS::CloudFormation::Init: 
          config:
              files:
                "/home/ec2-user/script.sh":
                  content: !Sub |
                          #!/bin/bash
                          sudo amazon-linux-extras install nginx1 -y
                          sudo service nginx start
                          sudo yum install ruby -y
                          sudo yum install wget -y
                          cd /home/ec2-user
                          sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
                          sudo chmod +x ./install
                          sudo ./install auto
                  mode: "000744"
                  owner: "ec2-user"
                  group: "ec2-user"
                  
                "/usr/share/nginx/html/abdelali.html":
                  content: !Sub |
                          <h1> Hi My name is ${Name} </h1>
                  mode: "000644"
                  owner: "root"
                  group: "root"
                  # The cfn-hup.conf file stores the name of the stack and the AWS credentials that the cfn-hup daemon targets.
                "/etc/cfn/cfn-hup.conf":
                  content: !Sub |
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
                    # The interval used to check for changes to the resource metadata in minutes. Default is 15
                    interval=2
                  mode: "000400"
                  owner: "root"
                  group: "root"
                # The user actions that the cfn-hup daemon calls periodically are defined in the hooks.conf configuration file.
                # To support composition of several applications deploying change notification hooks, cfn-hup supports a directory named hooks.d that is located in the hooks configuration directory. You can place one or more additional hooks configuration files in the hooks.d directory. The additional hooks files must use the same layout as the hooks.conf file.
                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                  content: !Sub |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
                  mode: "000400"
                  owner: "root"
                  group: "root"
      Properties:
        LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
        LaunchTemplateData:
          #ImageId:  !FindInMap 
          #  - RegionMap
          #  - !Ref 'AWS::Region'
          #  - AMI
          ImageId: !FindInMap
                 - RegionMap
                 - !Ref 'AWS::Region'
                 - AMI
          InstanceType: !Ref InstanceType
          #NetworkInterfaces:
          #  - DeviceIndex: 0
          #    AssociatePublicIpAddress: true
          #    Groups:
          #      - sg-0a379288ef0bd9430
          #    DeleteOnTermination: true
          KeyName: !Ref KeyName
          IamInstanceProfile:
            Name: !Ref EC2InstanceProfile
          SecurityGroupIds:
          - !GetAtt 
            - Ec2SSecurityGroup
            - GroupId


          UserData: 
           Fn::Base64: !Sub |
                
                #!/bin/bash
                yum update -y aws-cfn-bootstrap
                # Start cfn-init 
                /opt/aws/bin/cfn-init -s ${AWS::StackId} -r myLaunchTemplate --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
                # Run the script
                sudo bash /home/ec2-user/script.sh
                # cfn-hup daemon
                /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
                # all dones succefully send signal
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AutoScaling --region ${AWS::Region}
        
          TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: environment
              Value: development
          - ResourceType: volume
            Tags:
            - Key: environment
              Value: development
              
    # autoscaling
    AutoScaling:
      Type: AWS::AutoScaling::AutoScalingGroup
      CreationPolicy:
        ResourceSignal:
          Timeout: PT15M
      Properties:
        LaunchTemplate:
          LaunchTemplateId: !Ref myLaunchTemplate
          Version: !GetAtt 
            - myLaunchTemplate
            - LatestVersionNumber

        MaxSize: '3'
        MinSize: '1'
        DesiredCapacity: '2'
        TargetGroupARNs: 
          - !Ref TargetGroup
        VPCZoneIdentifier: !Ref Subnets
        
    # auto-scaling lifecycle
    AutoScalingLifecycle:
        Type: AWS::AutoScaling::LifecycleHook
        Properties: 
          AutoScalingGroupName: !Ref AutoScaling
          DefaultResult: CONTINUE
          HeartbeatTimeout: 3600
          LifecycleHookName: !Ref LifecycleHookName
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

    # ec2 security group
    
    Ec2SSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Security group for ec2 allow ssh and http
        GroupName: ec2-cloudformation-sg
        SecurityGroupEgress: 
            - IpProtocol: "-1"
              CidrIp: 0.0.0.0/0
        SecurityGroupIngress: 
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !GetAtt 
                  - LoadBalancerSg
                  - GroupId
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        Tags: 
          - Key: Name
            Value: Ec2SSecurityGroup
        VpcId: !Ref Vpc


    # elb sg
    
    LoadBalancerSg:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to client host
        Tags:
           - Key: Name
             Value: cloudformation-sg
        VpcId: !Ref Vpc
        SecurityGroupIngress:
  
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
  
        SecurityGroupEgress:
          - IpProtocol: "-1"
            CidrIp: 0.0.0.0/0
            
    # elb 
    
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties: 
        
        Name: clouformation-loadbalancer
        Scheme: internet-facing
        SecurityGroups: 
          - !Ref LoadBalancerSg
        Subnets: !Ref Subnets
        Tags: 
          - Key: Name
            Value: cloudformation-loadbalancer
        Type: application
        
        
    # target group
    
    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        HealthCheckPath: /
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        Name: cloudformation-targetgroup
        Port: 80
        Protocol: HTTP
        Tags: 
          - Key: Name
            Value: cloudformation-targetgroup
        VpcId: !Ref Vpc
        
    # elb listener
    Listener:
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        DefaultActions:
          - Type: "redirect"
            RedirectConfig:
             Protocol: "HTTPS"
             Port: 443
             Host: "#{host}"
             Path: "/#{path}"
             Query: "#{query}"
             StatusCode: "HTTP_301"
            
        LoadBalancerArn: !Ref LoadBalancer
        Port: '80'
        Protocol: HTTP
        
    # elb listener
    ListenerHttps:
      Type: 'AWS::ElasticLoadBalancingV2::Listener'
      Properties:
        Certificates:
         - CertificateArn: !Ref SSLARN
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroup
        LoadBalancerArn: !Ref LoadBalancer
        Port: 443
        Protocol: HTTPS
    
    # ssl
    LoadBalancerSSL:
      Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
      Properties: 
        Certificates: 
          - CertificateArn: !Ref SSLARN
        ListenerArn: !Ref ListenerHttps

      
    # route53 record
    ELBRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref HostedZoneId
        Comment: Zone apex alias targeted to myELB LoadBalancer
        RecordSets:
        - Name: !Ref Route53RecordName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt
                          - LoadBalancer
                          - CanonicalHostedZoneID
            DNSName: !GetAtt
                      - LoadBalancer
                      - DNSName
                      
                      
    #aws lambda
    LambdaFunction:
        Type: AWS::Lambda::Function
        Properties: 
          Code: src/index.py
          CodeSigningConfigArn: String
          Environment: 
            Variables:
               DOCUMENT_NAME: Document
               Name: abdelali
          FunctionName: aws-lambda-ssm
          Handler: index.handler
          Role: !GetAtt
                - LambdaRole
                - Arn
          Runtime: python3.8
          Tags: 
            - Key: Name
              Value: aws-lambda-ssm
              
    # aws ssm document
    SSMDocument:
        Type: AWS::SSM::Document
        Properties: 
          Attachments: 
            - AttachmentsSource
          Content: Json
          DocumentFormat: String
          DocumentType: String
          Name: String
          Requires: 
            - DocumentRequires
          Tags: 
            - Tag
          TargetType: String
          UpdateMethod: String
          VersionName: String

            
    # eventbridge rule
    AmazonCloudWatchEventRule:
      Type: AWS::Events::Rule
      Properties:
        EventPattern: !Sub |
             {
              "detail-type": "EC2 Instance-terminate Lifecycle Action",
              "source": "aws.autoscaling",
              "region": "AWS::Region",
              "detail": {
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING"
              }
            }
        RoleArn: !GetAtt
                 - EventBridgeIAMrole
                 - Arn
                 
        Targets:
            - Arn:
              Id: aws-lambda-function
                    
        
    # eventbridge rule Role
    EventBridgeIAMrole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Principal:
                  Service:  events.amazonaws.com
                Action: 'sts:AssumeRole'
          Path: /
          Policies:
            - PolicyName: invokelambda-function-policy
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Effect: Allow
                    Action:
                      - 'lambda:InvokeFunction'
                    Resource: *
                      
    # ec2 role s3 read bucket policy
    EC2Role:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: EC2S3ReadOnlyPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 's3:GetObject'
                  Resource: '*'
                  
    EC2InstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles:
          - !Ref EC2Role
          
          
          
    LambdaRole:
       Type: 'AWS::IAM::Role'
       Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          Path: /
          ManagedPolicyArns: 
            - arn:aws:iam::aws:policy/AmazonSSMFullAccess
          Policies: 
            - PolicyName: aws-lambda-cloudwatch-policy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - "logs:CreateLogGroup",
                      - "logs:CreateLogStream",
                      - "logs:PutLogEvents"
                    Resource: '*'
          RoleName: aws-role-lambda-ssm
          Tags: 
            - Key: Name
              Value: aws-role-lambda-ssm
            
    